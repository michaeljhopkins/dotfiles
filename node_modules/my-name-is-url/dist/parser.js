'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _regex = require('./regex');

var _regex2 = _interopRequireDefault(_regex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Parser class

var Parser = function () {
  function Parser() {
    var text = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

    _classCallCheck(this, Parser);

    this.text = text;
  }

  _createClass(Parser, [{
    key: 'get',
    value: function get() {

      // Make sure we have a string
      if (typeof this.text !== 'string') {
        this.text = '';
      }

      // Always return array
      return this.text.match(_regex2.default) || [];
    }
  }, {
    key: 'filter',
    value: function filter(cb) {

      // Make sure we have a string
      if (typeof this.text !== 'string') {
        this.text = '';
      }

      // Check callback is a funciton
      if (typeof cb !== 'function') {
        throw new Error('Invalid filter callback');
      }

      // Run filter on urls
      return this.text.replace(_regex2.default, cb);
    }
  }]);

  return Parser;
}();

exports.default = Parser;
module.exports = exports['default'];