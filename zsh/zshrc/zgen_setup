#!/bin/zsh
#
# Only including a shebang to trigger Sublime Text to use shell syntax highlighting
#
# Copyright 2006-2015 Joseph Block <jpb@unixorn.net>
#
# BSD licensed, see LICENSE.txt

# Clone zgen if you haven't already

zshPlugins=(pip sudo github python vagrant cp extract bower node nvm npm composer rbenv gem bgnotify) 

if [ ! -f ~/zgen/zgen.zsh ]; then
	pushd ~
	git clone git@github.com:tarjoilija/zgen.git
	popd
fi
source ~/zgen/zgen.zsh

setup-zgen-repos() {
	ZGEN_LOADED=()
	ZGEN_COMPLETIONS=()

	zgen oh-my-zsh

	# Here's where you update your plugins. You'll want to:
	# 1. Update the zgen load statements here
	# 2. source ~/.zgen-setup
	# 3. run setup-zgen-repos

	# If zsh-syntax-highlighting is bundled after zsh-history-substring-search,
	# they break, so get the order right.
	zgen load zsh-users/zsh-syntax-highlighting
	zgen load zsh-users/zsh-history-substring-search

	# Set keystrokes for substring searching
	zmodload zsh/terminfo
	bindkey "$terminfo[kcuu1]" history-substring-search-up
	bindkey "$terminfo[kcud1]" history-substring-search-down

	# Automatically run zgen update and zgen selfupdate every 7 days
	zgen load unixorn/autoupdate-zgen

	# Warn you when you run a command that you've got an alias for
	zgen load djui/alias-tips

	# k is a zsh script / plugin to make directory listings more readable,
	# adding a bit of color and some git status information on files and directories
	zgen load rimraf/k

	zgen load chrissicool/zsh-256color

	# Load more completion files for zsh from the zsh-lovers github repo
	zgen load zsh-users/zsh-completions src

	for i in "${zshPlugins[@]}"; do
		zgen oh-my-zsh plugins/$i
	done

	# Load me last
	GENCOMPL_FPATH=$HOME/.zsh/complete

	# Very cool plugin that generates zsh completion functions for commands
	# if they have getopt-style help text.
	zgen load RobSis/zsh-completion-generator

	# Bullet train prompt setup
	zgen load caiogondim/bullet-train-oh-my-zsh-theme bullet-train

	# Save it all to init script
	zgen save
}

# This comes from https://stackoverflow.com/questions/17878684/best-way-to-get-file-modified-time-in-seconds
# This works on both Linux with GNU fileutils and OS X with BSD stat.
get_file_modification_time() {
	modified_time=$(stat -c %Y "$1" 2> /dev/null)
	if [ "$?" -ne 0 ]; then
		modified_time=$(stat -f %m "$1" 2> /dev/null)
		if [ "$?" -ne 0 ]; then
			modified_time=$(date -r "$1" +%s 2> /dev/null)
			[ "$?" -ne 0 ] && modified_time=0
		fi
	fi
	echo "$modified_time"
}

# check if there's no init script
if ! zgen saved; then
	setup-zgen-repos
fi

# Our installation instructions get the user to make a symlink
# from ~/.zgen-setup to wherever they checked out the zsh-quickstart-kit
# repository. Unfortunately, stat will return the modification time of the
# symlink instead of the target file, so construct a full path to hand off
# to stat so it returns the modification time of the actual .zgen-setup file.
REAL_ZGEN_SETUP="~/.dotfiles/zsh/zgen/zgen_setup"

# If .zgen-setup is newer than init.zsh, regenerate init.zsh
if [ $(get_file_modification_time ${REAL_ZGEN_SETUP}) -gt $(get_file_modification_time ~/.zgen/init.zsh) ]; then
	setup-zgen-repos
fi
unset REAL_ZGEN_SETUP
